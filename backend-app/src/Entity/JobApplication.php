<?php

namespace App\Entity;

use ApiPlatform\Metadata\ApiResource;
use ApiPlatform\Metadata\Get;
use ApiPlatform\Metadata\GetCollection;
use ApiPlatform\Metadata\Post;
use ApiPlatform\Metadata\Put;
use App\Controller\CreateJobApplicationController;
use App\Entity\RootEntity\TrackableEntity;
use App\Enum\JobApplicationState;
use App\Repository\JobApplicationRepository;
use App\State\JobApplicationListStateProvider;
use App\State\UpdateJobApplicationStateProcessor;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Serializer\Annotation\Groups;

#[ORM\Entity(repositoryClass: JobApplicationRepository::class)]
#[ApiResource(
    operations: [
        new Get(),
        new Put(
          denormalizationContext: ['groups' => ['job-application:update-state']],
          processor: UpdateJobApplicationStateProcessor::class
        ),
        new Post(
            controller: CreateJobApplicationController::class,
            deserialize: false
        ),
         new GetCollection(
             paginationEnabled: true,
             paginationItemsPerPage: 5,
             paginationMaximumItemsPerPage: 5,
             normalizationContext: ['groups' => ['job-offer:read-collection', 'company:read:name', 'job-application:read-collection']],
             provider: JobApplicationListStateProvider::class
         )
    ],
    normalizationContext: ['groups' => ['job-application:read', 'user:read', 'document:read', 'role:read']],
    denormalizationContext: ['groups' => ['job-application:writable', 'document:writable']]
)]
class JobApplication extends TrackableEntity
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    #[Groups(['job-application:read', 'job-application:read:id', 'job-application:read-collection'])]
    private ?int $id = null;

    #[ORM\Column(length: 80)]
    #[Groups(['job-application:read', 'job-application:update-state', 'job-application:read-collection'])]
    private ?string $state = 'PENDING';

    #[ORM\ManyToOne(inversedBy: 'jobApplications')]
    #[ORM\JoinColumn(nullable: false)]
    #[Groups(['job-application:writable','job-application:read:jobOffer', 'job-application:read-collection'])]
    private ?JobOffer $jobOffer = null;

    #[ORM\ManyToOne(inversedBy: 'jobApplications')]
    #[ORM\JoinColumn(nullable: false)]
    #[Groups(['job-application:read', 'job-application:writable', 'job-application:read:applicant'])]
    private ?ApplicationUser $applicant = null;

    #[ORM\ManyToMany(targetEntity: Document::class, inversedBy: 'jobApplications', cascade: ['persist'])]
    #[Groups(['job-application:read', 'job-application:writable'])]
    private Collection $documents;

    #[ORM\OneToMany(mappedBy: 'jobApplication', targetEntity: Notifications::class, orphanRemoval: true)]
    private Collection $notifications;

    public function __construct()
    {
        $this->documents = new ArrayCollection();
        $this->notifications = new ArrayCollection();
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getState(): ?string
    {
        return $this->state;
    }

    public function setState(string $state): self
    {
        $this->state = $state;

        return $this;
    }

    public function getJobOffer(): ?JobOffer
    {
        return $this->jobOffer;
    }

    public function setJobOffer(?JobOffer $jobOffer): self
    {
        $this->jobOffer = $jobOffer;

        return $this;
    }

    public function getApplicant(): ?ApplicationUser
    {
        return $this->applicant;
    }

    public function setApplicant(?ApplicationUser $applicant): self
    {
        $this->applicant = $applicant;

        return $this;
    }


    #[Groups(['job-application:read:createdAt', 'job-application:read'])]
    public function getCreatedAt(): ?\DateTimeInterface
    {
        return parent::getCreatedAt(); // TODO: Change the autogenerated stub
    }

    /**
     * @return Collection<int, Document>
     */
    public function getDocuments(): Collection
    {
        return $this->documents;
    }

    public function addDocument(Document $document): self
    {
        if (!$this->documents->contains($document)) {
            $this->documents->add($document);
        }

        return $this;
    }

    public function removeDocument(Document $document): self
    {
        $this->documents->removeElement($document);

        return $this;
    }

    /**
     * @return Collection<int, Notifications>
     */
    public function getNotifications(): Collection
    {
        return $this->notifications;
    }

    public function addNotification(Notifications $notification): self
    {
        if (!$this->notifications->contains($notification)) {
            $this->notifications->add($notification);
            $notification->setJobApplication($this);
        }

        return $this;
    }

    public function removeNotification(Notifications $notification): self
    {
        if ($this->notifications->removeElement($notification)) {
            // set the owning side to null (unless already changed)
            if ($notification->getJobApplication() === $this) {
                $notification->setJobApplication(null);
            }
        }

        return $this;
    }
}
